'''
무한히 넓은 좌표평면이 있습니다.

한 번의 이동으로 상하좌우 중 한 방향으로 1 만큼 움직일 수 있습니다. 
예를 들어 현재 좌표가 (0, 0)이라면, 한 번의 이동으로 갈 수 있는 좌표는 (0, 1), (0, -1), (1, 0), (-1, 0) 의 네 곳입니다.

당신은 (x1, y1)에서 출발해 정확히 N번 이동하여 (x2, y2)에서 멈추려 합니다. 
특히, 출발점을 포함해 이동 중 같은 좌표를 두 번 이상 방문해선 안됩니다. 
그런 경로의 개수를 알려주는 프로그램을 작성하세요.
-------------------------------------------
[입력값 설명]
첫 번째 줄에 N이 주어집니다. (1 ≤ N ≤ 10)
두 번째 줄에 x1과 y1이 공백을 구분으로 주어집니다. (-100 ≤ x1, y1 ≤ 100)
세 번째 줄에 x2와 y2가 공백을 구분으로 주어집니다. (-100 ≤ x2, y2 ≤ 100)

[출력값 설명]
지문의 조건을 만족하는 경로의 개수를 출력합니다.
--------------------------------------------------

예제 입력1
8
0 0
3 3

예제 출력1
120

예제 입력2
2
-1 -1
-1 -1

예제 출력2
0

'''

# 8543. 이동하기
N = int(input())
x1, y1 = map(int, input().split())
x2, y2 = map(int, input().split())

def count_paths(N, x1, y1, x2, y2):
    visited = set()  # 방문한 좌표를 저장할 집합
    count = [0]  # 경로의 개수를 저장할 리스트

    def backtrack(x, y, step):
        if step == N:  # 목적지에 도달한 경우
            if x == x2 and y == y2:  # 목적지에 도달했고, 출발점도 포함된 경로인 경우
                count[0] += 1
            return

        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            nx, ny = x + dx, y + dy
            if (nx, ny) not in visited:  # 방문하지 않은 좌표인 경우
                visited.add((nx, ny))  # 방문 표시
                backtrack(nx, ny, step + 1)  # 다음 단계로 진행
                visited.remove((nx, ny))  # 백트래킹

    visited.add((x1, y1))
    backtrack(x1, y1, 0)

    return count[0]

print(count_paths(N, x1, y1, x2, y2))
            
        

    