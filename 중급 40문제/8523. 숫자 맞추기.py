'''
토요일 오후에 심심한 동빈은 혼자 숫자 맞추기 게임을 하는 중입니다.
숫자 맞추기 게임이란,
시작 숫자에서 1을 더하거나, 1을 빼거나, 2를 곱하는 과정을 반복하여 
목표 숫자에 가장 빠른 방법으로 도달하도록 하는 게임입니다.

예를 들어 목표 숫자를 8로 잡고, 
시작 숫자를 6으로 정했다면 6에 1을 두 번 더하는 방법으로 목표에 도달하는 것이 가장 빠른 방법입니다.
이때 목표에 도달하기 위한 최소 횟수는 2번입니다.

목표 숫자와 시작 숫자가 주어졌을 때 
동빈이 숫자 맞추기 게임을 가장 빨리 끝낼 수 있는 횟수를 구하는 프로그램을 작성하세요.

추가적인 예시로 목표 숫자가 500이고, 시작 숫자가 30이라면 
(30, 31, 62, 124, 125, 250, 500)의 순서대로 6번만에 도달할 수 있습니다.
------------------------------------------------------------------------
[입력값 설명]
『첫째 줄에 목표 숫자 N (0 ≤ N ≤ 100,000)과 시작 숫자 K (0 ≤ K ≤ 100,000)가 주어집니다.
입력으로 주어지는 수는 모두 정수입니다.』

[출력값 설명]
『목표 숫자에 도달할 수 있는 최소 횟수를 출력합니다.』
------------------------------------------------------------------------
예제 입력1
8 6

예제 출력1
2

예제 입력2
500 30

예제 출력2
6

예제 입력3
800 16

예제 출력3
10
'''

import sys
from collections import deque

def find_min_steps(N, K):
    visited = [False] * 100001  # 방문 여부를 저장하는 리스트
    queue = deque([(K, 0)])  # 시작 숫자와 횟수를 저장하는 큐
    visited[K] = True

    while queue:
        num, steps = queue.popleft()

        if num == N:  # 목표 숫자에 도달한 경우 횟수 반환
            return steps

        # 다음에 방문할 숫자를 추가
        next_num = [num + 1, num - 1, num * 2]
        for nxt in next_num:
            if 0 <= nxt <= 100000 and not visited[nxt]:
                queue.append((nxt, steps + 1))
                visited[nxt] = True


if __name__=="__main__":
    N, K = map(int, input().split())
    print(find_min_steps(N, K))