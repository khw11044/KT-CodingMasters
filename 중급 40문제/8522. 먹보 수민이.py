'''
수민은 저녁 약속을 위해 차를 타고 식당을 가던 중,
차가 고장나서 남은 거리를 일직선으로 걸어가기로 했습니다.

수민의 몸은 굉장히 특이하기 때문에 1km 걸을때마다 포만감이 1씩 떨어집니다.
포만감이 0이 되면 그는 더 이상 움직일 수 없습니다.

다행히도 식당까지 걸어가는 길에 편의점들이 많이 있어 필요하면 들려서 포만감을 올릴 수 있습니다.
그는 대식가이기 때문에 필요하면 얼마든지 많이 먹을 수 있어 포만감을 올리는데 제한이 없습니다.

수민은 식당에 최대한 빨리 가야 하기 때문에 중간에 편의점에 들르는 횟수는 최소화하려고 합니다.

편의점의 위치, 각 편의점에서 얻을 수 있는 포만감이 주어질 때,
편의점에 들르는 횟수를 구하는 프로그램을 만드세요.
------------------------------------------------------------------------
[입력값 설명]
『첫째 줄에 편의점의 개수 N(1≤ N ≤ 100)가 입력되고
두 번째 줄부터 N+1번째 줄 까지 편의점의 정보가 주어집니다.

편의점의 정보는 두 정수 a, b로 이루어져 있는데,
a (1 ≤ a ≤ 1,000)는 수민이 출발한 위치에서 편의점까지의 거리,
그리고 b (1 ≤ b ≤ 100)는 그 편의점에서 얻을 수 있는 포만감을 의미합니다.
a, b는 공백을 두고 주어집니다.

N + 2번째 줄에는 두 정수 L과 P가 공백을 두고 주어지는데,
L (1 ≤ L ≤ 1,500)은 수민의 위치에서 목표지점인 식당까지의 거리,
P (1≤ P ≤ 100)는 초기 수민의 포만감입니다.』

[출력값 설명]
『첫째 줄에 수민이 편의점에 들르는 횟수의 최솟값을 출력합니다.
만약 수민이 식당에 도착할 수 없다면 -1을 출력합니다.』
------------------------------------------------------------------------
예제 입력1
5
4 39
43 51
49 18
89 39
116 75
178 7

예제 출력1
4

예제 입력2
13
8 88
52 18
73 73
143 100
237 1
397 84
462 93
473 92
572 64
605 25
622 29
770 27
924 12
999 23

예제 출력2
-1
'''
# -*- coding: utf-8 -*-
import sys
input = sys.stdin.readline
# 현재 포만도로 갈 수 있는 편의점 중, 가장 높은 포만도의 편의점에 가서 먹는 것
if __name__ == "__main__":
    N = int(input())
    conve = [list(map(int, input().split())) for _ in range(N)]
    L, P = map(int, input().split())
    answer = 0
    conve.sort(key=lambda x: x[0])
    
    P = [0, P]
    s, i = 0, 0
    while True:
        if (P[0] + P[1]) >= L:
            break
        
        while i<N:
            if P[1] <= (conve[i][0]-P[0]):
                break
            i += 1
        
        lst = conve[s:i]
        if lst == []:
            answer = -1
            break
        
        lst.sort(key=lambda x: x[1], reverse=True)
        P[1] = P[1] - (lst[0][0] - P[0]) + lst[0][1]
        P[0] = lst[0][0]
        
        s = conve.index(lst[0]) + 1
        i = s
        answer += 1
        
    print(answer)