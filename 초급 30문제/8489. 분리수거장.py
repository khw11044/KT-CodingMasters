'''
두정동에는 N개의 아파트 단지가 일직선상에 존재합니다. 
각 아파트 단지에는 1번부터 N번까지 번호가 붙어있습니다.
두정동 동사무소에서는 아파트 단지 중 한 곳에 분리수거장을 지으려고 합니다. 
분리수거장으로부터 각 주민들까지의 거리의 합이 최소가 되도록 하려면 
어떤 아파트 단지에 분리수거장을 지어야 하는지 구하는 프로그램을 작성하세요.


분리수거장으로부터 어떤 주민까지의 거리는 
분리수거장이 있는 아파트 단지의 위치와 
해당 주민이 거주하는 아파트 단지의 위치의 차로 계산됩니다.

단, 조건을 만족하는 아파트 단지가 여러개일 경우, 더 작은 번호의 아파트 단지에 분리수거장을 짓습니다.
------------------------------------------------------------------------
[입력값 설명]
『첫째 줄에 아파트 단지의 수 N(1 ≤ N ≤ 100)이 주어집니다.
다음 N개의 줄에는 i(1 ≤ i ≤ N)번 단지의 위치 D[i]와 i번 단지에 거주하는 사람의 수 A[i]가 주어집니다.
단, 서로 다른 아파트 단지의 위치가 같은 경우는 존재하지 않습니다.
(0 ≤ D[i] ≤ 100,000), (1 ≤ A[i] ≤ 100,000)』

[출력값 설명]
『첫째 줄에 분리수거장을 지을 아파트 단지의 번호를 출력합니다.』
------------------------------------------------------------------------
예제 입력1
7
475 170
28 95
506 8361
51 3988
2 977
607 793
49 847

예제 출력1
3

예제 입력2
11
998 2607
9422 3358
806 80622
2848 4153
398 180
867 22219
6514 806
246 9462
906 43046
2592 289
8 8486

예제 출력2
3
'''
# 문제 설명이 너무 안좋음 
# 분리수거장으로부터 어떤 주민까지의 거리 = 현재 아파트 위치 - 어떤 주민의 아파트 위치 
# 현재 아파트 위치를 분리수거장으로 정하면 
# 특정 분리수거장 위치에 대한 어떤 주민들의 거리 = (현재 아파트 위치 - 다른 아파트 위치) * 다른 아파트 주민 수 

# -*- coding: utf-8 -*-
import sys
sys.stdin=open('input.txt', 'r')
# input = sys.stdin.readline

def find_optimal_location(N, locs):
    min_dis_sum = float('inf')
    optimal_loc = -1           # 분리수거장의 최적 위치 

    for cur in range(N):              # 순서대로 아파트 단지를 확인 
        curr_dis_sum = 0            # i번째 아파트에 분리수거장을 설치할 때, 단지의 위치 차 * 단지의 주민 수들의 합  
        for other in range(N):          # i번째 아파트 단지 기준 j번째 아파트 단지들과의 거리 비교  
            if other == cur:
                continue
            curr_dis_sum += abs(locs[cur][0] - locs[other][0]) * locs[other][1]

        # 현재 단지의 계산값이 최소거나, 최소값과 현재 단지의 계산값이 같은데 더 앞번호 단지이면 
        if curr_dis_sum < min_dis_sum or (curr_dis_sum == min_dis_sum and cur < optimal_loc):
            min_dis_sum = curr_dis_sum      
            optimal_loc = cur

    return optimal_loc + 1

if __name__=="__main__":
    # 입력 받기
    N = int(input())
    locs = []
    for _ in range(N):
        D, A = map(int, input().split())    # 단지의 위치, 단지에 거주하는 사람 수 
        locs.append((D, A))

    # 결과 출력
    result = find_optimal_location(N, locs)
    print(result)